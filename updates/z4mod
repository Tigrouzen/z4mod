#!/z4mod/bin/sh
###############################################################################
#
# z4mod, by Elia Yehuda, (c) 2010, GPLv2
# backup a partition, format, and restore
#
###############################################################################

#
# setting up initial environment settings
#
version=$version
[ -f /z4mod/bin/log-functions ] && . /z4mod/bin/log-functions
# everything is logged into /sdcard/z4mod.log
export PATH=/z4mod/bin:/sbin:$PATH

###############################################################################
#
# declaring various functions for code-readability...
#
###############################################################################

log()
{
	[ "$fontfile" == "" ] && return
	set +x
	drawstring "$1" > /dev/null 2>&1
	set -x
}

halt()
{
	log "$1"
	umount /$partition
	[ "$sdcarddev" == "" ] && umount /sdcard
	#log "Rebooting in 5 seconds..."
	sleep 5
	exit
}

log_start()
{
	cat <<EOF
###############################################################################
#
# Starting z4mod-$version, (C) Elia Yehuda aka z4ziggy, 2010-2011, GPLv2
# Converting /$1 to '$3' on `date`
#
###############################################################################
EOF
}

start_logging()
{
	# we make sure we have /sdcard mounted
	sdcardmounted=`grep sdcard /proc/mounts`
	if [ "$sdcardmounted" == "" ]; then
		# mount sdcard according to device node from fota.rc
		sdcarddev=`grep "mount vfat .* /sdcard" /fota.rc | awk '{print $3}'`
		mkdir /sdcard
		mount $sdcarddev /sdcard
	fi
	exec >> /sdcard/z4mod.log 2>&1
}

set_variables()
{
	partition="$1"
	devblock=/dev/block/"$2"
	filesystem="$3"

	case "$filesystem" in
		rfs)	format_cmd=fat.format
			;;
		jfs)	[ `grep ${filesystem} /proc/filesystems` ] && format_cmd=mkfs.${filesystem}
			;;
		ext2|ext3|ext4)
			[ `grep ${filesystem} /proc/filesystems` ] && format_cmd=mkfs.${filesystem}
			;;
		*)
			# defaulting to 'auto' - check which filesystem are supported
			[ `grep jfs /proc/filesystems` ] && filesystem=jfs
			[ `grep ext2 /proc/filesystems` ] && filesystem=ext2
			[ `grep ext3 /proc/filesystems` ] && filesystem=ext3
			[ `grep ext4 /proc/filesystems` ] && filesystem=ext4
			format_cmd=mkfs.${filesystem}
			;;
	esac
	[ "${format_cmd}" == "" ] && halt "No format command found for ${filesystem} filesystem!"
	[ `which ${format_cmd}` ] || halt "Format command $format_cmd does not exist in path" 

	# get current filesystem, default to rfs
	currentfs=`grep -m1 "/${partition}" /etc/fstab | awk '{print $3}'`
	[ "${currentfs}" == "" ] && currentfs="rfs"
}

mount_target_as()
{
	# we unmount just to make sure target is not mounted already
	umount /${partition}; sync; sync
	# mount normal, fallback as rfs mount, halt on failure of both
	mount -t $1 ${devblock} /${partition} -o `get_mount_opt $1` || 
	mount -t rfs ${devblock} /${partition} -o `get_mount_opt rfs` || 
	halt "Could not mount /${partition} as $1 or as rfs"

	log "${devblock} mounted on /${partition} successfully"
}

check_freespace_on_sdcard()
{
	rm -f /sdcard/${partition}.z4mod.tar
	# check for free space (using such a complicated command to overcome a 'df' bug with long lines)
	# get free space on /sdcard
	free_space=`df /sdcard/ | tail -n1 | sed 's|/[^ ]*||g' | awk '{print $3}'`
	# get used space on target
	backup_size=`df ${devblock} | tail -n1 | sed 's|/[^ ]*||g' | awk '{print $2}'`
	[ $backup_size -ge $free_space ] && halt "Insufficient free space ($free_space) on /sdcard. $backup_size is required."
}

get_mount_opt()
{
	case "$1" in
		rfs) 	echo "llw,check=no,nosuid,nodev";;
		jfs) 	echo "nosuid,nodev,noatime,nodiratime,errors=continue";;
		ext2) 	echo "nosuid,nodev,noatime,nodiratime,errors=continue,nobh";;
		ext3) 	echo "nosuid,nodev,noatime,nodiratime,errors=continue,nobh,data=writeback,barrier=0";;
		ext4) 	echo "nosuid,nodev,noatime,nodiratime,errors=continue,nobh,data=writeback,barrier=0,noauto_da_alloc";;
	esac
}

format_target()
{
	# Format partition with optimized settings (TODO: restore on error)
	log "Formatting /${partition} as ${filesystem}"
	case "${filesystem}" in
		rfs)
			case "${partition}" in
				data)   ${format_cmd} -S 4096 -F 32 -s 4 ${devblock} ;;
				dbdata) ${format_cmd} -S 4096 -F 16 -s 1 ${devblock} ;;
				cache)  ${format_cmd} -S 4096 -F 16 -s 1 ${devblock} ;;
				system) ${format_cmd} -S 4096 -F 32 -s 1 ${devblock} ;;
			esac
			;;
		jfs)
			${format_cmd} -L ${partition} -q ${devblock}
			;;
		ext2|ext3|ext4)
			# TODO: "-E lazy_itable_init=1 -O sparse_super,uninit_bg" doesnt work on ext2. maybe mount issue?
			${format_cmd} -L ${partition} -q -b 4096 -m 0 -F ${devblock}
			# tune the filesystem - check every 100 mounts or 30 days
			tune2fs -c 100 -i 30d -m 0 ${devblock}
			;;
	esac
	sync; sync
}

update_fstab()
{
	system=`grep -o "mount rfs .* /system" /recovery.rc | cut -f 3 -d" "`
	mount -t rfs $system /system -o llw,check=no || mount $system /system -o errors=continue,noatime,nodiratime
	touch /system/etc/fstab
	# remove entry if exists already
	sed -i '\,'$devblock',d' /system/etc/fstab
	if [ "${filesystem}" != "rfs" ]; then
		# add /system/etc/fstab proper info
		echo "$devblock /${partition} $filesystem `get_mount_opt $filesystem`" >> /system/etc/fstab
	fi
	umount /system
}

###############################################################################
#
# do the actual work on target- 
# mount,backup,unmount,format,mount,restore,update fstab,unmount
#
###############################################################################

start_logging
set -x
log_start $*
log "Starting z4mod-$version"
[ ! -f /z4mod/z4version ] && halt "Your kernel is not z4mod - /z4mod/z4version is missing!"
set_variables $*
log "Converting /$partition to '$filesystem'"
log "Current filesystem: '$currentfs'"
log "Format command: $format_cmd"

mount_target_as $currentfs
check_freespace_on_sdcard
log "Backing up files from /${partition} to /sdcard/${partition}.z4mod.tar"
# remove old backup if any
tar cf /sdcard/${partition}.z4mod.tar /${partition} 
# umount - exit on failure, no harm is done
umount /${partition} || halt "Could not unmount /${partition}"

format_target
mount_target_as $filesystem
log "Restoring backup from /sdcard/${partition}.z4mod.tar"
tar xf /sdcard/${partition}.z4mod.tar -C /
ret=$?
[ $ret == 0 ] && rm /sdcard/${partition}.z4mod.tar
update_fstab
umount /$partition

log "Conversion Completed!"
sleep 2

[ "$sdcarddev" == "" ] && umount /sdcard
exit $ret

