# z4mod, by Elia Yehuda, (c) 2010, GPLv2
# backup a partition, format, and restore
#
export PATH=/z4mod/bin:/:/sbin:/system/xbin:/system/bin:$PATH
version=$version

# we make sure we have /sdcard mounted
sdcardmounted=`busybox grep sdcard /proc/mounts`
if [ "$sdcardmounted" == "" ]; then
	# mount sdcard according to device node from fota.rc
	sdcarddev=`busybox grep "mount vfat .* /sdcard" /fota.rc | busybox awk '{print $3}'`
	mkdir /sdcard
	busybox mount $sdcarddev /sdcard
fi

# everything is logged into /sdcard/z4mod.log
exec >> /sdcard/z4mod.log 2>&1
export PATH=/z4mod/bin:/:/sbin:/system/xbin:/system/bin:$PATH
set -x

halt()
{
	errmsg="$1"
	[ "$errmsg" == "" ] && errmsg="No error specified"
	logstring "$errmsg"
	busybox umount /${partition}
	[ "$sdcardmounted" == "" ] && busybox umount /sdcard
	logstring "Rebooting in 15 seconds..."
	sleep 15
	exit 1
}

busybox cat <<EOF
###############################################################################
#
# Starting z4mod-$version '$3' convert on /$1 (/dev/block/$2)
# `busybox date`
#
###############################################################################
EOF

partition="$1"
devblock=/dev/block/"$2"
filesystem="$3"
splashfile="$4"
fontfile="$5"

fontwidth=12
fontheight=18

drawchar() {
	i=0
	ch=`echo "$1" | od -t d1 | awk '{print $2}'`
	dx=$2
	dy=$3
	while [ $i -lt $fontheight ]; do
		seek=$((1920*dy+1920*i+dx*4))
		skip=$((ch*4*fontwidth*fontheight+i*4*fontwidth))
		count=$((4*fontwidth))
		dd bs=1 if=$fontfile skip=$skip seek=$seek count=$count of=/dev/graphics/fb0
		i=$((i+1))
	done
}

drawstring() {
	str=$1
	x=$x_log
	y="$y_log"
	i=1
	while char="`expr substr $str $i 1`"; do 
		i=$((i+1))
		drawchar "$char" $x $y
		x=$((x+fontwidth))
		if [ "$char" == " " -o "$char" == "/" ]; then
			if [ $x -gt 330 ]; then
				y_log=$((y_log+fontheight))
				y=$((y+fontheight))
				[ $y_log -gt 590 ] && y_log=210
				x=44
			fi
		fi
	done
	y_log=$((y_log+fontheight))
	[ $y_log -gt 590 ] && y_log=210
}

x_log=44
y_log=210

logstring() {
	[ "$fontfile" == "" ] && return
	set +x
	drawstring "$1" > /dev/null 2>&1
	set -x
}

[ "$splashfile" != "" ] && cat $splashfile | busybox gunzip -c > /dev/graphics/fb0
logstring "z4conversion system initialized"
logstring "Starting z4mod-$version '$3'"
logstring "Convert on /$1 (/dev/block/$2)"

# check we are running under a z4mod-patched initramfs/kernel
[ ! -f /z4mod/z4version ] && halt "Your kernel is not z4mod - /z4mod/z4version is missing!"

if [ "$filesystem" == "ext2" -o "$filesystem" == "ext3" -o "$filesystem" == "ext4" ]; then
	[ `busybox grep ${filesystem} /proc/filesystems` ] && format_cmd=mkfs.${filesystem}
elif [ "$filesystem" == "jfs" ]; then
	[ `busybox grep ${filesystem} /proc/filesystems` ] && format_cmd=mkfs.${filesystem}
elif [ "$filesystem" == "rfs" ]; then
	format_cmd=fat.format
	#format_cmd=mkfs.vfat
else
	# defaulting to 'auto' - check which filesystem are supported
        [ `busybox grep jfs /proc/filesystems` ] && filesystem=jfs
	[ `busybox grep ext2 /proc/filesystems` ] && filesystem=ext2
	[ `busybox grep ext3 /proc/filesystems` ] && filesystem=ext3
	[ `busybox grep ext4 /proc/filesystems` ] && filesystem=ext4
	format_cmd=mkfs.${filesystem}
fi

logstring "Format command: $format_cmd"

# check we have all the tools needed
[ "${format_cmd}" == "" ] && halt "No format command found for that filesystem!"
[ `busybox which ${format_cmd}` ] || halt "Format command $format_cmd does not exist in path" 

# fix mtab errors
busybox mount -o remount,rw /
busybox mount -o remount,rw /system
busybox ln -s /proc/mounts /etc/mtab

# /system takes special handling before we can unmount it
if [ "${partition}" == "system" ]; then
	# if we want to umount it, we better have it in /sbin...
	busybox cp `busybox which ${format_cmd}` /sbin/
	# kill all processes using /system
	busybox fuser -mk /system
fi

# get current filesystem
currentfs=`busybox grep -m1 "/${partition}" /etc/fstab | busybox awk '{print $3}'`
#[ "${currentfs}" == "${filesystem}" ] && halt
# defaulting to rfs
[ "${currentfs}" == "" ] && currentfs="rfs"

logstring "Current filesystem: $currentfs"

# we unmount just to make sure target is not mounted already
busybox umount /${partition}

# we must mount target with propriate mount parameters
if [ "${currentfs}" == "rfs" ]; then
	# mount using RFS mount parameters - otherwise it will be mounted as FAT, which is bad.
	busybox mount -t $currentfs ${devblock} /${partition} -o nosuid,nodev,check=no || halt "Could not mount existing /${partition} as rfs"
	#mount -o nosuid,nodev,check=no -t rfs ${devblock} /${partition}
else
	# mount target as ext2/3/4, defaults to rfs
	busybox mount -t $currentfs ${devblock} /${partition} -o nosuid,nodev,noatime,nodiratime,errors=continue || busybox mount -t rfs ${devblock} /${partition} -o nosuid,nodev,check=no || halt "Could not mount /${partition} as ${currentfs} or as rfs"
fi

logstring "${devblock} mounted on /${partition} successfully"

# remove old backup if any
busybox rm -f /sdcard/${partition}.z4mod.tar

# check for free space (using such a complicated command to overcome a 'df' bug with long lines)
# get free space on /sdcard
free_space=`busybox df ${sdcarddev} | busybox tail -n1 | busybox sed 's|/[^ ]*||g' | busybox awk '{print $3}'`
# get used space on target
backup_size=`busybox df ${devblock} | busybox tail -n1 | busybox sed 's|/[^ ]*||g' | busybox awk '{print $2}'`
[ $backup_size -ge $free_space ] && halt "You do not have enough free space on ${sdcarddev}. $backup_size is required."

# backup target - exit on failure
busybox rm /sdcard/${partition}.z4mod.tar
busybox rm /data/rfs.log
logstring "Backing up data on /${partition} to /sdcard/${partition}.z4mod.tar"
busybox tar cf /sdcard/${partition}.z4mod.tar /${partition} 
# for debug:
busybox echo $?

# umount - exit on failure, no harm is done
busybox umount /${partition} || halt "Could not unmount /${partition}"

# Format partition with optimized settings (TODO: restore on error)
if [ "${filesystem}" == "rfs" ]; then
	logstring "Formatting ${devblock} as RFS"
	mountopt="llw,check=no,nosuid,nodev"
	${format_cmd} -l "MSWIN4.1" -F 32 -S 4096 -s 4 ${devblock}
	#${format_cmd} ${devblock}
elif [ "${filesystem}" == "jfs" ]; then
	logstring "Formatting ${devblock} as JFS"
	mountopt="nosuid,nodev,noatime,nodiratime,errors=continue"
	${format_cmd} -L ${partition} -q ${devblock}
else
	if [ "${filesystem}" == "ext2" ]; then
		mountopt="nosuid,nodev,noatime,nodiratime,errors=continue,nobh"
	elif [ "${filesystem}" == "ext3" ]; then
		mountopt="nosuid,nodev,noatime,nodiratime,errors=continue,nobh,data=writeback,barrier=0"
	else
		mountopt="nosuid,nodev,noatime,nodiratime,errors=continue,nobh,data=writeback,barrier=0,noauto_da_alloc"
	fi
	logstring "Formatting ${devblock} as ${filesystem}"
	# TODO: "-E lazy_itable_init=1 -O sparse_super,uninit_bg" doesnt work on ext2. maybe busybox mount issue?
	${format_cmd} -q -L ${partition} -b 4096 -m 0 -F ${devblock}
	# tune the filesystem - check every 100 mounts or 30 days
	tune2fs -c 100 -i 30d -m 0 ${devblock}
fi
# mount the new filesystem - exit on failure (TODO: restore on error)
busybox mount -t ${filesystem} ${devblock} /${partition} -o $mountopt || halt "Could not mount ${devblock} as ${filesystem}!"

# this is for the logging...
busybox mount | busybox grep ${devblock}

# extract our data back to the new filesystem
logstring "Restoring backup from /sdcard/${partition}.z4mod.tar"
busybox tar xf /sdcard/${partition}.z4mod.tar -C /
ret=$?
[ $ret == 0 ] && busybox rm /sdcard/${partition}.z4mod.tar

busybox touch /system/etc/fstab
# remove entry if exists already
busybox sed -i '\,'$devblock',d' /system/etc/fstab
# add /system/etc/fstab proper info
echo "$devblock /${partition} $filesystem $mountopt" >> /system/etc/fstab
busybox mount -o remount,ro /system

# umount
busybox umount ${devblock}
[ "$sdcardmounted" == "" ] && busybox umount /sdcard

logstring "Conversion Completed!"
sleep 5

exit $ret

