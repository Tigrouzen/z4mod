#!/sbin/busybox sh
#
# z4mod, by Elia Yehuda, (c) 2010, GPLv2
# backup a partition, format, and restore
#
# TODO: Better backup - dump rfs partition as image, 
#       mount as loop to restore data, dump using redbend_ua/dd for recovery.
#       It adds a bit of complexity to the code (loop), but _much_ more safe.
#       OR format the rfs partition back, and restore the tar normally...
# TODO: Add JFS support
#

set -x
(
export PATH=/:/system/xbin:/system/sbin:$PATH

halt()
{
	umount /${partition}
	exit 1
}

busybox cat <<EOF
###############################################################################
#
# Starting z4mod '$3' convert on /$1 (/dev/block/$2)
# `busybox date`
#
###############################################################################
EOF

# check we are running under a z4mod-patched initramfs/kernel
#[ `busybox grep z4mod /*.rc` ] || halt
[ ! -f /z4mod ] && halt

partition="$1"
devblock=/dev/block/"$2"
filesystem="$3"

if [ "${filesystem:0:3}" == "ext" ]; then
	[ `busybox grep ${filesystem} /proc/filesystems` ] && format_cmd=mkfs.${filesystem}
elif [ "$filesystem" == "jfs" ]; then
	format_cmd=mkfs.jfs
elif [ "$filesystem" == "rfs" ]; then
	format_cmd=fat.format
else
	# defaulting to 'auto' - check which filesystem are supported
	#[ `busybox grep rfs /proc/filesystems` ] && format_cmd=fat.format
	[ `busybox grep ext2 /proc/filesystems` ] && filesystem=ext2
	[ `busybox grep ext3 /proc/filesystems` ] && filesystem=ext3
	[ `busybox grep ext4 /proc/filesystems` ] && filesystem=ext4
	format_cmd=mkfs.${filesystem}
fi

# check we have all the tools needed
[ "${format_cmd}" == "" ] && halt
[ `busybox which ${format_cmd}` ] || halt

# /system takes special handling before we can unmount it
# FIXME: NOT TESTED YET!
if [ "${partition}" == "system" ]; then
	busybox killall adbd
	busybox killall recovery
fi

# we unmount just to make sure target is not mounted already
busybox umount /${partition}
# we mount using RFS mount parameters - otherwise it will be mounted as FAT :-)
if [ "${filesystem}" == "rfs" ]; then
	# we assume target is ext2/3/4 already
	busybox mount ${devblock} /${partition} -o nosuid,nodev,noatime,nodiratime,errors=continue || halt
else
	# we assume target is rfs atm
	busybox mount ${devblock} /${partition} -o nosuid,nodev,check=no || halt
fi

# remove old backup if any
busybox rm -f /sdcard/${partition}.z4mod.tar

# check for free space (using such a complicated command to overcome a 'df' bug with long lines)
# get free space on /sdcard
free_space=`busybox df /dev/block/mmcblk0p1 | busybox tail -n1 | busybox sed 's|/[^ ]*||g' | busybox awk '{print $3}'`
# get used space on target
backup_size=`busybox df ${devblock} | busybox tail -n1 | busybox sed 's|/[^ ]*||g' | busybox awk '{print $2}'`
[ $backup_size -ge $free_space ] && halt

# backup target - exit on failure
busybox tar cf /sdcard/${partition}.z4mod.tar /${partition} 
# for debug:
busybox echo $?

# umount - exit on failure, no harm is done
busybox umount /${partition} || halt

# for 'data' partition we make sure the filesystem type is flagged in the partition table
if [ "${partition}" == "data" ]; then
	# we change fs-type manually in the partition table
	if [ "${filesystem}" == "rfs" ]; then
		# flag partition as fat32 for rfs
		echo -en "\x0C" | busybox dd of=/dev/block/mmcblk0 seek=$((0x1d2))
	else
		# flag partition as ext2/3/4
		echo -en "\x83" | busybox dd of=/dev/block/mmcblk0 seek=$((0x1d2))
	fi
fi

# Format partition with optimized settings (TODO: restore on error)
if [ "${filesystem}" == "rfs" ]; then
	${format_cmd} -F 32 -S 4096 -s 4 ${devblock}
	# trying to mount it either way - using busybox mount as 'backup' mount...
	mount -o nosuid,nodev,check=no -t rfs ${devblock} /${partition} || busybox mount -t rfs ${devblock} /${partition} -o nosuid,nodev,check=no
elif [ "${filesystem}" == "jfs" ]; then
	# jfs format
	${format_cmd} -L ${partition} -q ${devblock}
	# jfs mount
	busybox mount -t ${filesystem} ${devblock} /${partition} || halt
else
	# TODO: "-E lazy_itable_init=1 -O sparse_super,uninit_bg" doesnt work on ext2. maybe busybox mount issue?
	${format_cmd} -q -L ${partition} -b 4096 -m 0 -F ${devblock}
	# tune the filesystem - check every 100 mounts or 30 days
	tune2fs -c 100 -i 30d -m 0 ${devblock}
	# mount the new filesystem - exit on failure (TODO: restore on error)
	busybox mount -t ${filesystem} ${devblock} /${partition} || halt
fi

# this is for the logging...
busybox mount | busybox grep ${devblock}

# extract our data back to the new filesystem
busybox tar xf /sdcard/${partition}.z4mod.tar -C /
ret=$?
[ $ret == 0 ] && busybox rm /sdcard/${partition}.z4mod.tar

# umount
busybox umount ${devblock}

exit $ret

# everything is logged into /sdcard/z4mod.log
) >> /sdcard/z4mod.log 2>&1

