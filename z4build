#!/bin/bash
###############################################################################
#
# z4build by Elia Yehuda, aka z4ziggy, (c) 2010
# part of the z4mod project - a ROM mod without RFS.
#
# extracts initramfs from a given zImage, patch it to allow non-RFS mounts,
# and repack it.
#
# Released under the GPLv2
#
# many thanks goto various coders & Android hackers out there who made this
# possible: supercurio, Unhelpful, dkcldark, RyanZA, XDA & modaco forums.
#
# WARNING:
# FOR YOUR OWN SAFETY, IF YOU CAN'T FOLLOW THE SCRIPT, AVOID USING IT.
# USE AT YOUR OWN RISK! NO WARRANTIES WHAT SO EVER!
#
# zImage extraction script copied from here:
# http://forum.xda-developers.com/wiki/index.php?title=Extract_initramfs_from_zImage
#
# kernel_repacker taken from here:
# http://forum.xda-developers.com/showthread.php?t=789712
#
###############################################################################

###############################################################################
#
# SETTINGS: You must provide valid path to kernel_repacker below
#
###############################################################################
# set -x

# where to find kernel_repack/editor.sh
KERNEL_REPACKER=$HOME/kernel_repacker/editor-dev.sh

# No need to change anything below this

###############################################################################
#
# general functions
#
###############################################################################

C_H1="\033[1;37m"        # highlight text 1
C_ERR="\033[1;31m"
C_CLEAR="\033[1;0m"

# helper functions:

printhl() {
	printf "${C_H1}${1}${C_CLEAR} \n"
}

printerr() {
	printf "${C_ERR}${1}${C_CLEAR} \n"
}

exit_error() {
	printerr "$1"
	rm -rf ${wrkdir}
	exit 1
}

exit_usage() {
	printhl "\nUsage:"
	echo    "  z4build <zImage> [recovery] [root] [busybox] [-t <file.tar>]"
	printhl "\nWhere:"
	echo    "zImage      = the zImage file (kernel) you wish to patch"
	#echo    "z4mod       = [optional] install z4mod wrapper for ext2/3/4"
	echo    "recovery    = [optional] install recovery into initramfs"
	echo    "root        = [optional] install root into initramfs"
	echo    "busybox     = [optional] install busybox into initramfs"
	echo    "-t file.tar = [optional] extract file.tar over initramfs"
	echo
	exit 1
}

###############################################################################
#
# checking parameters and initalize stuff
#
###############################################################################

# Making sure we have everything
zImage=`realpath $1`
shift
if [ ! -f $zImage ]; then
	printerr "[E] Can't find kernel: $zImage"
	exit_usage
fi

if [ $# -eq 0 -o $# -gt 3 ]; then
        printerr "[E] Wrong parameters"
        exit_usage
fi

if [ ! -f "${KERNEL_REPACKER}" ]; then
	exit_error "[E] Can't find kernel_repacker"
fi

while [ "$*" ]; do
	if [ "$1" == "-t" ]; then
		shift
		tarfile=`realpath $1`
		if [ ! -f "${tarfile}" ]; then
			exit_error "[E] Can't find user supplied tarfile"
		fi
	else
		eval do_${1}="true"
	fi
        shift
done

printhl "\n[I] z4build begins, patching $zImage for ext2/3/4 support"

# We can start working
wrkdir=`pwd`/tmp/z4mod-$$-$RANDOM
srcdir=`dirname $0`
mkdir -p ${wrkdir}/initramfs/sbin
mkdir -p ${wrkdir}/initramfs/dev/block

###############################################################################
#
# extract the initramfs.img from zImage
#
###############################################################################

# find start of gziped kernel object in the zImage file:
pos=`grep -a -b -m 1 --only-matching $'\x1F\x8B\x08' $zImage | cut -f 1 -d :`
printhl "[I] Extracting kernel image from $zImage (start = $pos)"
# the cpio archive might be gzipped too, so two gunzips could be needed:
dd if=$zImage bs=1 skip=$pos | gunzip > ${wrkdir}/kernel.img
pos=`grep -a -b -m 1 --only-matching $'\x1F\x8B\x08' ${wrkdir}/kernel.img | cut -f 1 -d :`
# find start and end of the "cpio" initramfs image inside the kernel object:
# ASCII cpio header starts with '070701'
# The end of the cpio archive is marked with an empty file named TRAILER!!!
if [ ! $pos = "" ]; then
	printhl "[I] Extracting compressed cpio image from kernel image (start = $pos)"
	dd if=${wrkdir}/kernel.img bs=1 skip=$pos | gunzip > ${wrkdir}/cpio.img
	start=`grep -a -b -m 1 --only-matching '070701' ${wrkdir}/cpio.img | head -1 | cut -f 1 -d :`
	end=`grep -a -b -m 1 --only-matching 'TRAILER!!!' ${wrkdir}/cpio.img | head -1 | cut -f 1 -d :`
	inputfile=${wrkdir}/cpio.img
else
	printhl "[I] Already uncompressed cpio.img, not decompressing"
	start=`grep -a -b -m 1 --only-matching '070701' ${wrkdir}/kernel.img | head -1 | cut -f 1 -d :`
	end=`grep -a -b -m 1 --only-matching 'TRAILER!!!' ${wrkdir}/kernel.img | head -1 | cut -f 1 -d :`
	inputfile=${wrkdir}/kernel.img
fi

end=$((end + 10))
count=$((end - start))
if (($count < 0)); then
	exit_error "[E] Couldn't match start/end of the initramfs image."
fi
# FIXME:
count=9999999999
printhl "[I] Extracting initramfs image from $inputfile (start = $start, end = $end)"
dd if=$inputfile bs=1 skip=$start count=$count > ${wrkdir}/initramfs.img

###############################################################################
#
# extract initramfs.img, patch the binary init, patch the scripts and add 
# additional mounts
#
###############################################################################

printhl "[I] Extracting initramfs compressed image"
(cd ${wrkdir}/initramfs/; cpio -i --no-absolute-filenames < ${wrkdir}/initramfs.img)

# check if this kernel is patched already with z4build
if [ -f ${wrkdir}/initramfs/z4mod ] || [ `cmp -s ${srcdir}/init.sh ${wrkdir}/initramfs/init` ]; then
	exit_error "[E] This kernel is already patched with z4build"
fi

# check for existance of busybox in the initramfs
if [ -f ${wrkdir}/initramfs/sbin/busybox ] && [ ! -L ${wrkdir}/initramfs/sbin/busybox ]; then
	# enable do_busybox to override existing busybox
	do_busybox="true"
fi

# use real path of the init (in case its a symlink)
initfile=`realpath ${wrkdir}/initramfs/init`
#elf_signature=`file -b ${initfile}`
#if [ "${elf_signature:0:3}" == "ELF" ]; then
if [ -f ${initfile} ]; then
	printhl "[I] Replacing init binary"
	# move original init to sbin
	mv ${initfile} ${wrkdir}/initramfs/sbin/init
	# and place our init wrapper instead of /init
	cp ${srcdir}/init.sh ${wrkdir}/initramfs/init
	# copy the post-init script
	cp ${srcdir}/post.init.sh ${wrkdir}/initramfs/post.init.sh
	# add onetime service to run post.init.sh at the end of init.rc
	# FIXME: test this
	echo -e "\n# Added by z4mod\nservice z4postinit /post.init.sh\n    user root\n    oneshot\n" >> ${wrkdir}/initramfs/init.rc
else
	exit_error "[E] Couldn't find /init executable in the initramfs image"
fi

# installing either busybox.init or full-busybox for our init wrapper
if [ ! -z "$do_busybox" ]; then
	# copy the full-busybox binary, and replace busybox.init in our init wrapper
	cp ${srcdir}/opt/busybox/system/xbin/busybox ${wrkdir}/initramfs/sbin/busybox
	sed -i 's/busybox.init/busybox/g' ${wrkdir}/initramfs/init
	sed -i 's/busybox.init/busybox/g' ${wrkdir}/initramfs/post.init.sh
else
	# copy the tiny busybox.init
	cp ${srcdir}/opt/busybox.init/sbin/busybox.init ${wrkdir}/initramfs/sbin/busybox.init
fi

# root
if [ ! -z "$do_root" ]; then
	# copy su binary
	cp -r ${srcdir}/opt/root/system/xbin/su ${wrkdir}/initramfs/sbin/su
	# copy the Superuser.apk
	cp ${srcdir}/opt/root/system/app/Superuser.apk ${wrkdir}/initramfs/
	# post.init.sh will copy the apk to /system/app if needed
fi

# recovery
if [ ! -z "$do_recovery" ]; then
	printhl "[I] Replacing recovery"
	# copy files needed for recovery-2e
	cp -r ${srcdir}/opt/recovery/* ${wrkdir}/initramfs/
	# make sure the recovery script will start our new recovery binary
	sed -i 's|^service recovery.*|service recovery /sbin/recovery|g' ${wrkdir}/initramfs/recovery.rc
fi

# watermark
touch ${wrkdir}/initramfs/z4mod

# if user supplied his own tarfile, extract it now
if [ ! -z "${tarfile}" ]; then
	tar xv ${tarfile} -C ${wrkdir}/initramfs/
fi

###############################################################################
#
# repack the patched initramfs and replace it with orignal initramfs in zImage
#
###############################################################################

printhl "[I] Saving patched initramfs.img"
(cd ${wrkdir}/initramfs/; find . | cpio -H newc -o | gzip -9 > ${wrkdir}/initramfs.img)
printhl "[I] Repacking zImage"
pushd `dirname ${KERNEL_REPACKER}`
rm -f new_zImage
${KERNEL_REPACKER} ${zImage} ${wrkdir}/initramfs.img
popd
if [ ! -f `dirname ${KERNEL_REPACKER}`/new_zImage ]; then
	exit_error "[E] Failed building new zImage"
fi
printhl "[I] Moving new kernel to current dir"
mv `dirname ${KERNEL_REPACKER}`/new_zImage $zImage

rm -rf ${wrkdir}
printhl "[I] Done."


